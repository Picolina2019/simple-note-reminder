{"version":3,"sources":["App.js","store/actions/index.js","store/types.js","serviceWorker.js","store/reducers/index.js","index.js","localStorage.js"],"names":["App","reminder","useSelector","state","reminders","useState","value","setValue","date","setDate","dispatch","useDispatch","onSubmit","e","preventDefault","trim","text","type","payload","addReminder","addingReminder","id","uuidv4","className","placeholder","onChange","target","Button","variant","length","map","rem","key","moment","Date","fromNow","onClick","deleteReminder","Boolean","window","location","hostname","match","initialState","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","action","filter","subscribe","_","throttle","stringify","setItem","console","log","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTA8EeA,MArEf,WACE,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aADjC,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,KAKPC,EAAWC,cAejB,OACE,yBAAKC,SAbc,SAACC,GAEpB,GADAA,EAAEC,iBACmB,KAAjBR,EAAMS,OACR,OAAO,MALY,SAACC,EAAMR,GAASE,ECbhB,SAACM,EAAKR,GAC7B,MAAM,CACFS,KCJqB,eDKrBC,QAAQF,EAAKR,QDU+BW,CAAYH,EAAMR,IAOhEY,CAAe,CACbJ,KAAMV,EACNe,GAAIC,cACJd,KAAMA,IAERD,EAAS,KAGoBgB,UAAU,OACrC,yBAAKA,UAAU,SAAf,YACA,0BAAMA,UAAU,QACd,yBAAKA,UAAU,cACb,2BACEA,UAAU,eACVC,YAAY,YACZlB,MAAOA,EACPmB,SAAU,SAACZ,GAAD,OAAON,EAASM,EAAEa,OAAOpB,UAErC,2BACEiB,UAAU,eACVN,KAAK,iBACLQ,SAAU,SAACZ,GAAD,OAAOJ,EAAQI,EAAEa,OAAOpB,WAGtC,kBAACqB,EAAA,EAAD,CAAQC,QAAQ,UAAUX,KAAK,UAA/B,iBAIAhB,EAAS4B,OAGT,wBAAIN,UAAU,uBACXtB,EAAS6B,KAAI,SAACC,GACb,OACE,wBAAIC,IAAKD,EAAIV,GAAIE,UAAU,mBACzB,yBAAKA,UAAU,aACb,6BAAMQ,EAAIf,MACV,6BACE,4BAAKiB,IAAO,IAAIC,KAAKH,EAAIvB,OAAO2B,aAGpC,yBACEZ,UAAU,0BACVa,QAAS,kBAjDDf,EAiDsBU,EAAIV,GAjDnBX,ECRL,SAACW,GAC3B,MAAM,CACFJ,KCTwB,kBDUxBC,QAAQG,GDK4BgB,CAAehB,IAAhC,IAACA,IA+CV,eAZR,wDGvCYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCfAC,EAAa,CACfvC,UAAU,I,iBCORwC,ECXiB,WACnB,IACI,IAAMC,EAAiBC,aAAaC,QAAQ,mBAC5C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACrB,MAAMK,GACH,QDGeC,GACjBC,EAAQC,aDLS,WAAiC,IAAhClD,EAA+B,uDAAvBwC,EAAcW,EAAS,uCACrD,OAAOA,EAAOrC,MACR,IFTmB,eEUf,kCACOd,GADP,IAEIC,UAAU,GAAD,mBAAKD,EAAMC,WAAX,CAAsBkD,EAAOpC,YAG9C,IFdsB,kBEelB,kCACOf,GADP,IAEIC,UAAUD,EAAMC,UAAUmD,QAAO,SAAAtD,GAAQ,OAAEA,EAASoB,KAAKiC,EAAOpC,aAGpE,QACI,OAAOf,KCVYyC,GAEnCQ,EAAMI,UACJC,IAAEC,UAAS,YCHY,SAACvD,GACtB,IACI,IAAM0C,EAAiBG,KAAKW,UAAUxD,GACtC2C,aAAac,QAAQ,kBAAkBf,GAC1C,MAAMK,GACHW,QAAQC,IAAIZ,IDDhBa,CAAU,CACT3D,UAAUgD,EAAMY,WAAW5D,cAE3B,MAGL6D,IAASC,OACP,kBAAC,IAAD,CAAUd,MAAOA,GACf,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.c9291148.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addReminder, deleteReminder } from './store/actions';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\n\nfunction App() {\n  const reminder = useSelector((state) => state.reminders);\n  const [value, setValue] = useState('');\n  const [date, setDate] = useState('');\n\n  const dispatch = useDispatch();\n  const addingReminder = (text, date) => dispatch(addReminder(text, date));\n  const removeReminder = (id) => dispatch(deleteReminder(id));\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (value.trim() === '') {\n      return null;\n    }\n    addingReminder({\n      text: value,\n      id: uuidv4(),\n      date: date,\n    });\n    setValue('');\n  };\n  return (\n    <div onSubmit={handleSubmit} className='App'>\n      <div className='title'>REMINDER</div>\n      <form className='form'>\n        <div className='form-group'>\n          <input\n            className='form-control'\n            placeholder='I need...'\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n          <input\n            className='form-control'\n            type='datetime-local'\n            onChange={(e) => setDate(e.target.value)}\n          />\n        </div>\n        <Button variant='success' type='submit'>\n          Add reminder\n        </Button>\n      </form>\n      {!reminder.length ? (\n        <p>Nothing to remind about</p>\n      ) : (\n        <ul className='list-group col-sm-4'>\n          {reminder.map((rem) => {\n            return (\n              <li key={rem.id} className='list-group-item'>\n                <div className='list-item'>\n                  <div>{rem.text}</div>\n                  <div>\n                    <em>{moment(new Date(rem.date)).fromNow()}</em>\n                  </div>\n                </div>\n                <div\n                  className='list-item delete-button'\n                  onClick={() => removeReminder(rem.id)}\n                >\n                  &#x2715;\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import {ADD_REMINDER, DELETE_REMINDER} from '../types';\n\nexport const addReminder=(text,date)=>{\n  return{\n      type: ADD_REMINDER,\n      payload:text,date\n  }\n}\nexport const deleteReminder=(id)=>{\n  return{\n      type: DELETE_REMINDER,\n      payload:id\n  }\n}","export const ADD_REMINDER= 'ADD_REMINDER';\nexport const DELETE_REMINDER= 'DELETE_REMINDER';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ADD_REMINDER, DELETE_REMINDER} from '../types';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState={\n    reminders:[]\n};\n\nexport const reducer = (state = initialState, action)=>{\n  switch(action.type){\n        case ADD_REMINDER:\n            return{\n                ...state,\n                reminders:[...state.reminders, action.payload]\n            \n        } \n        case DELETE_REMINDER:\n            return{\n                ...state,\n                reminders:state.reminders.filter(reminder=>reminder.id!==action.payload)\n\n            }\n            default:\n                return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer } from './store/reducers';\nimport { loadState, saveState } from './localStorage';\nimport _ from 'lodash';\n\nconst persistedState = loadState();\nconst store = createStore(reducer, persistedState);\n\nstore.subscribe(\n  _.throttle(() => {\n    saveState({\n     reminders:store.getState().reminders}\n    );\n  }, 1000)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState=()=>{\n    try{\n        const serializedState= localStorage.getItem('state.reminders');\n        if (serializedState === null){\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    }catch(err){\n        return undefined;\n    }\n}\n\nexport const saveState = (state)=>{\n    try{\n        const serializedState= JSON.stringify(state);\n        localStorage.setItem('state.reminders',serializedState);\n    }catch(err){\n        console.log(err)\n    }\n}"],"sourceRoot":""}